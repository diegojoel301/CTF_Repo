// third_party/blink/public/mojom/blob/blob_url_store.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_BLOB_BLOB_URL_STORE_MOJOM_PARAMS_DATA_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_BLOB_BLOB_URL_STORE_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

namespace mojo::internal {
class ValidationContext;
}


namespace blink::mojom {
namespace internal {
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) BlobURLStore_Register_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data blob;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> unsafe_agent_cluster_id;
  mojo::internal::Pointer<::network::mojom::internal::SchemefulSite_Data> unsafe_top_level_site;

 private:
  friend class mojo::internal::MessageFragment<BlobURLStore_Register_Params_Data>;

  BlobURLStore_Register_Params_Data();
  ~BlobURLStore_Register_Params_Data() = delete;
};
static_assert(sizeof(BlobURLStore_Register_Params_Data) == 40,
              "Bad sizeof(BlobURLStore_Register_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) BlobURLStore_Register_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<BlobURLStore_Register_ResponseParams_Data>;

  BlobURLStore_Register_ResponseParams_Data();
  ~BlobURLStore_Register_ResponseParams_Data() = delete;
};
static_assert(sizeof(BlobURLStore_Register_ResponseParams_Data) == 8,
              "Bad sizeof(BlobURLStore_Register_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) BlobURLStore_Revoke_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;

 private:
  friend class mojo::internal::MessageFragment<BlobURLStore_Revoke_Params_Data>;

  BlobURLStore_Revoke_Params_Data();
  ~BlobURLStore_Revoke_Params_Data() = delete;
};
static_assert(sizeof(BlobURLStore_Revoke_Params_Data) == 16,
              "Bad sizeof(BlobURLStore_Revoke_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) BlobURLStore_ResolveAsURLLoaderFactory_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;
  mojo::internal::Handle_Data factory;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<BlobURLStore_ResolveAsURLLoaderFactory_Params_Data>;

  BlobURLStore_ResolveAsURLLoaderFactory_Params_Data();
  ~BlobURLStore_ResolveAsURLLoaderFactory_Params_Data() = delete;
};
static_assert(sizeof(BlobURLStore_ResolveAsURLLoaderFactory_Params_Data) == 24,
              "Bad sizeof(BlobURLStore_ResolveAsURLLoaderFactory_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) BlobURLStore_ResolveAsURLLoaderFactory_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> unsafe_agent_cluster_id;
  mojo::internal::Pointer<::network::mojom::internal::SchemefulSite_Data> unsafe_top_level_site;

 private:
  friend class mojo::internal::MessageFragment<BlobURLStore_ResolveAsURLLoaderFactory_ResponseParams_Data>;

  BlobURLStore_ResolveAsURLLoaderFactory_ResponseParams_Data();
  ~BlobURLStore_ResolveAsURLLoaderFactory_ResponseParams_Data() = delete;
};
static_assert(sizeof(BlobURLStore_ResolveAsURLLoaderFactory_ResponseParams_Data) == 24,
              "Bad sizeof(BlobURLStore_ResolveAsURLLoaderFactory_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) BlobURLStore_ResolveForNavigation_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;
  mojo::internal::Handle_Data token;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<BlobURLStore_ResolveForNavigation_Params_Data>;

  BlobURLStore_ResolveForNavigation_Params_Data();
  ~BlobURLStore_ResolveForNavigation_Params_Data() = delete;
};
static_assert(sizeof(BlobURLStore_ResolveForNavigation_Params_Data) == 24,
              "Bad sizeof(BlobURLStore_ResolveForNavigation_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) BlobURLStore_ResolveForNavigation_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> unsafe_agent_cluster_id;

 private:
  friend class mojo::internal::MessageFragment<BlobURLStore_ResolveForNavigation_ResponseParams_Data>;

  BlobURLStore_ResolveForNavigation_ResponseParams_Data();
  ~BlobURLStore_ResolveForNavigation_ResponseParams_Data() = delete;
};
static_assert(sizeof(BlobURLStore_ResolveForNavigation_ResponseParams_Data) == 16,
              "Bad sizeof(BlobURLStore_ResolveForNavigation_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) BlobURLToken_Clone_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data token;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<BlobURLToken_Clone_Params_Data>;

  BlobURLToken_Clone_Params_Data();
  ~BlobURLToken_Clone_Params_Data() = delete;
};
static_assert(sizeof(BlobURLToken_Clone_Params_Data) == 16,
              "Bad sizeof(BlobURLToken_Clone_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) BlobURLToken_GetToken_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<BlobURLToken_GetToken_Params_Data>;

  BlobURLToken_GetToken_Params_Data();
  ~BlobURLToken_GetToken_Params_Data() = delete;
};
static_assert(sizeof(BlobURLToken_GetToken_Params_Data) == 8,
              "Bad sizeof(BlobURLToken_GetToken_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) BlobURLToken_GetToken_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> token;

 private:
  friend class mojo::internal::MessageFragment<BlobURLToken_GetToken_ResponseParams_Data>;

  BlobURLToken_GetToken_ResponseParams_Data();
  ~BlobURLToken_GetToken_ResponseParams_Data() = delete;
};
static_assert(sizeof(BlobURLToken_GetToken_ResponseParams_Data) == 16,
              "Bad sizeof(BlobURLToken_GetToken_ResponseParams_Data)");

}  // namespace internal


class BlobURLStore_Register_ParamsDataView {
 public:
  BlobURLStore_Register_ParamsDataView() = default;

  BlobURLStore_Register_ParamsDataView(
      internal::BlobURLStore_Register_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeBlob() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::blink::mojom::BlobInterfaceBase>>(
            &data_->blob, &result, message_);
    DCHECK(ret);
    return result;
  }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUrl(UserType* output) {
    
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  inline void GetUnsafeAgentClusterIdDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUnsafeAgentClusterId(UserType* output) {
    
    auto* pointer = data_->unsafe_agent_cluster_id.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, message_);
  }
  inline void GetUnsafeTopLevelSiteDataView(
      ::network::mojom::SchemefulSiteDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUnsafeTopLevelSite(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::network::mojom::SchemefulSiteDataView, UserType>(),
    "Attempting to read the optional `unsafe_top_level_site` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with std::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadUnsafeTopLevelSite` instead "
    "of `ReadUnsafeTopLevelSite if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->unsafe_top_level_site.Get();
    return mojo::internal::Deserialize<::network::mojom::SchemefulSiteDataView>(
        pointer, output, message_);
  }
 private:
  internal::BlobURLStore_Register_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


class BlobURLStore_Register_ResponseParamsDataView {
 public:
  BlobURLStore_Register_ResponseParamsDataView() = default;

  BlobURLStore_Register_ResponseParamsDataView(
      internal::BlobURLStore_Register_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::BlobURLStore_Register_ResponseParams_Data* data_ = nullptr;
};


class BlobURLStore_Revoke_ParamsDataView {
 public:
  BlobURLStore_Revoke_ParamsDataView() = default;

  BlobURLStore_Revoke_ParamsDataView(
      internal::BlobURLStore_Revoke_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUrl(UserType* output) {
    
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
 private:
  internal::BlobURLStore_Revoke_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


class BlobURLStore_ResolveAsURLLoaderFactory_ParamsDataView {
 public:
  BlobURLStore_ResolveAsURLLoaderFactory_ParamsDataView() = default;

  BlobURLStore_ResolveAsURLLoaderFactory_ParamsDataView(
      internal::BlobURLStore_ResolveAsURLLoaderFactory_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUrl(UserType* output) {
    
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeFactory() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::network::mojom::URLLoaderFactoryInterfaceBase>>(
            &data_->factory, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::BlobURLStore_ResolveAsURLLoaderFactory_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


class BlobURLStore_ResolveAsURLLoaderFactory_ResponseParamsDataView {
 public:
  BlobURLStore_ResolveAsURLLoaderFactory_ResponseParamsDataView() = default;

  BlobURLStore_ResolveAsURLLoaderFactory_ResponseParamsDataView(
      internal::BlobURLStore_ResolveAsURLLoaderFactory_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetUnsafeAgentClusterIdDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUnsafeAgentClusterId(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::mojo_base::mojom::UnguessableTokenDataView, UserType>(),
    "Attempting to read the optional `unsafe_agent_cluster_id` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with std::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadUnsafeAgentClusterId` instead "
    "of `ReadUnsafeAgentClusterId if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->unsafe_agent_cluster_id.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, message_);
  }
  inline void GetUnsafeTopLevelSiteDataView(
      ::network::mojom::SchemefulSiteDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUnsafeTopLevelSite(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::network::mojom::SchemefulSiteDataView, UserType>(),
    "Attempting to read the optional `unsafe_top_level_site` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with std::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadUnsafeTopLevelSite` instead "
    "of `ReadUnsafeTopLevelSite if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->unsafe_top_level_site.Get();
    return mojo::internal::Deserialize<::network::mojom::SchemefulSiteDataView>(
        pointer, output, message_);
  }
 private:
  internal::BlobURLStore_ResolveAsURLLoaderFactory_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


class BlobURLStore_ResolveForNavigation_ParamsDataView {
 public:
  BlobURLStore_ResolveForNavigation_ParamsDataView() = default;

  BlobURLStore_ResolveForNavigation_ParamsDataView(
      internal::BlobURLStore_ResolveForNavigation_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUrl(UserType* output) {
    
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeToken() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::blink::mojom::BlobURLTokenInterfaceBase>>(
            &data_->token, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::BlobURLStore_ResolveForNavigation_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


class BlobURLStore_ResolveForNavigation_ResponseParamsDataView {
 public:
  BlobURLStore_ResolveForNavigation_ResponseParamsDataView() = default;

  BlobURLStore_ResolveForNavigation_ResponseParamsDataView(
      internal::BlobURLStore_ResolveForNavigation_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetUnsafeAgentClusterIdDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUnsafeAgentClusterId(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::mojo_base::mojom::UnguessableTokenDataView, UserType>(),
    "Attempting to read the optional `unsafe_agent_cluster_id` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with std::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadUnsafeAgentClusterId` instead "
    "of `ReadUnsafeAgentClusterId if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->unsafe_agent_cluster_id.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, message_);
  }
 private:
  internal::BlobURLStore_ResolveForNavigation_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


class BlobURLToken_Clone_ParamsDataView {
 public:
  BlobURLToken_Clone_ParamsDataView() = default;

  BlobURLToken_Clone_ParamsDataView(
      internal::BlobURLToken_Clone_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeToken() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::blink::mojom::BlobURLTokenInterfaceBase>>(
            &data_->token, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::BlobURLToken_Clone_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


class BlobURLToken_GetToken_ParamsDataView {
 public:
  BlobURLToken_GetToken_ParamsDataView() = default;

  BlobURLToken_GetToken_ParamsDataView(
      internal::BlobURLToken_GetToken_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::BlobURLToken_GetToken_Params_Data* data_ = nullptr;
};


class BlobURLToken_GetToken_ResponseParamsDataView {
 public:
  BlobURLToken_GetToken_ResponseParamsDataView() = default;

  BlobURLToken_GetToken_ResponseParamsDataView(
      internal::BlobURLToken_GetToken_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetTokenDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadToken(UserType* output) {
    
    auto* pointer = data_->token.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, message_);
  }
 private:
  internal::BlobURLToken_GetToken_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};

inline void BlobURLStore_Register_ParamsDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void BlobURLStore_Register_ParamsDataView::GetUnsafeAgentClusterIdDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->unsafe_agent_cluster_id.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, message_);
}
inline void BlobURLStore_Register_ParamsDataView::GetUnsafeTopLevelSiteDataView(
    ::network::mojom::SchemefulSiteDataView* output) {
  auto pointer = data_->unsafe_top_level_site.Get();
  *output = ::network::mojom::SchemefulSiteDataView(pointer, message_);
}




inline void BlobURLStore_Revoke_ParamsDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}


inline void BlobURLStore_ResolveAsURLLoaderFactory_ParamsDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}


inline void BlobURLStore_ResolveAsURLLoaderFactory_ResponseParamsDataView::GetUnsafeAgentClusterIdDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->unsafe_agent_cluster_id.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, message_);
}
inline void BlobURLStore_ResolveAsURLLoaderFactory_ResponseParamsDataView::GetUnsafeTopLevelSiteDataView(
    ::network::mojom::SchemefulSiteDataView* output) {
  auto pointer = data_->unsafe_top_level_site.Get();
  *output = ::network::mojom::SchemefulSiteDataView(pointer, message_);
}


inline void BlobURLStore_ResolveForNavigation_ParamsDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}


inline void BlobURLStore_ResolveForNavigation_ResponseParamsDataView::GetUnsafeAgentClusterIdDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->unsafe_agent_cluster_id.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, message_);
}






inline void BlobURLToken_GetToken_ResponseParamsDataView::GetTokenDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->token.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, message_);
}



}  // blink::mojom

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_BLOB_BLOB_URL_STORE_MOJOM_PARAMS_DATA_H_