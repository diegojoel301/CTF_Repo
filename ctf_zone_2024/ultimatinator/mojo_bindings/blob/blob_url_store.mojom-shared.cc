// third_party/blink/public/mojom/blob/blob_url_store.mojom-shared.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "third_party/blink/public/mojom/blob/blob_url_store.mojom-shared.h"

// Used to support stream output operator for enums.
// TODO(dcheng): Consider omitting this somehow if not needed.
#include <ostream>
#include <utility>

#include "base/strings/stringprintf.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "third_party/blink/public/mojom/blob/blob_url_store.mojom-params-data.h"
namespace blink {
namespace mojom {

namespace internal {


// static
bool BlobURLStore_Register_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 40, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const BlobURLStore_Register_Params_Data* object =
      static_cast<const BlobURLStore_Register_Params_Data*>(data);

  if (!mojo::internal::ValidateHandleOrInterfaceNonNullable(
          object->blob, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateHandleOrInterface(object->blob,
                                                 validation_context)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->url, 2, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->url, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->unsafe_agent_cluster_id, 3, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->unsafe_agent_cluster_id, validation_context))
    return false;

  if (!mojo::internal::ValidateStruct(object->unsafe_top_level_site, validation_context))
    return false;

  return true;
}

BlobURLStore_Register_Params_Data::BlobURLStore_Register_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool BlobURLStore_Register_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const BlobURLStore_Register_ResponseParams_Data* object =
      static_cast<const BlobURLStore_Register_ResponseParams_Data*>(data);

  return true;
}

BlobURLStore_Register_ResponseParams_Data::BlobURLStore_Register_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool BlobURLStore_Revoke_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const BlobURLStore_Revoke_Params_Data* object =
      static_cast<const BlobURLStore_Revoke_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->url, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->url, validation_context))
    return false;

  return true;
}

BlobURLStore_Revoke_Params_Data::BlobURLStore_Revoke_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool BlobURLStore_ResolveAsURLLoaderFactory_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const BlobURLStore_ResolveAsURLLoaderFactory_Params_Data* object =
      static_cast<const BlobURLStore_ResolveAsURLLoaderFactory_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->url, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->url, validation_context))
    return false;

  if (!mojo::internal::ValidateHandleOrInterfaceNonNullable(
          object->factory, 2, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateHandleOrInterface(object->factory,
                                                 validation_context)) {
    return false;
  }

  return true;
}

BlobURLStore_ResolveAsURLLoaderFactory_Params_Data::BlobURLStore_ResolveAsURLLoaderFactory_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool BlobURLStore_ResolveAsURLLoaderFactory_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const BlobURLStore_ResolveAsURLLoaderFactory_ResponseParams_Data* object =
      static_cast<const BlobURLStore_ResolveAsURLLoaderFactory_ResponseParams_Data*>(data);

  if (!mojo::internal::ValidateStruct(object->unsafe_agent_cluster_id, validation_context))
    return false;

  if (!mojo::internal::ValidateStruct(object->unsafe_top_level_site, validation_context))
    return false;

  return true;
}

BlobURLStore_ResolveAsURLLoaderFactory_ResponseParams_Data::BlobURLStore_ResolveAsURLLoaderFactory_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool BlobURLStore_ResolveForNavigation_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const BlobURLStore_ResolveForNavigation_Params_Data* object =
      static_cast<const BlobURLStore_ResolveForNavigation_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->url, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->url, validation_context))
    return false;

  if (!mojo::internal::ValidateHandleOrInterfaceNonNullable(
          object->token, 2, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateHandleOrInterface(object->token,
                                                 validation_context)) {
    return false;
  }

  return true;
}

BlobURLStore_ResolveForNavigation_Params_Data::BlobURLStore_ResolveForNavigation_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool BlobURLStore_ResolveForNavigation_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const BlobURLStore_ResolveForNavigation_ResponseParams_Data* object =
      static_cast<const BlobURLStore_ResolveForNavigation_ResponseParams_Data*>(data);

  if (!mojo::internal::ValidateStruct(object->unsafe_agent_cluster_id, validation_context))
    return false;

  return true;
}

BlobURLStore_ResolveForNavigation_ResponseParams_Data::BlobURLStore_ResolveForNavigation_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool BlobURLToken_Clone_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const BlobURLToken_Clone_Params_Data* object =
      static_cast<const BlobURLToken_Clone_Params_Data*>(data);

  if (!mojo::internal::ValidateHandleOrInterfaceNonNullable(
          object->token, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateHandleOrInterface(object->token,
                                                 validation_context)) {
    return false;
  }

  return true;
}

BlobURLToken_Clone_Params_Data::BlobURLToken_Clone_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool BlobURLToken_GetToken_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const BlobURLToken_GetToken_Params_Data* object =
      static_cast<const BlobURLToken_GetToken_Params_Data*>(data);

  return true;
}

BlobURLToken_GetToken_Params_Data::BlobURLToken_GetToken_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool BlobURLToken_GetToken_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const BlobURLToken_GetToken_ResponseParams_Data* object =
      static_cast<const BlobURLToken_GetToken_ResponseParams_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->token, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->token, validation_context))
    return false;

  return true;
}

BlobURLToken_GetToken_ResponseParams_Data::BlobURLToken_GetToken_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}

}  // namespace internal
}  // namespace mojom
}  // namespace blink