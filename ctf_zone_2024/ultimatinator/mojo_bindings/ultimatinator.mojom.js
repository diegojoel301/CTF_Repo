// third_party/blink/public/mojom/ultimatnator/ultimatinator.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'third_party/blink/public/mojom/ultimatnator/ultimatinator.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('blink.mojom');



  function Trainee(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Trainee.prototype.initDefaults_ = function() {
    this.id = 0;
    this.number = 0;
    this.isUltimated = 0;
    this.secret = null;
  };
  Trainee.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Trainee.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;





    // validate Trainee.secret
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 16, 1, codec.Uint8, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Trainee.encodedSize = codec.kStructHeaderSize + 24;

  Trainee.decode = function(decoder) {
    var packed;
    var val = new Trainee();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id =
        decoder.decodeStruct(codec.Uint32);
    val.number =
        decoder.decodeStruct(codec.Uint32);
    val.isUltimated =
        decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.secret =
        decoder.decodeArrayPointer(codec.Uint8);
    return val;
  };

  Trainee.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Trainee.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.id);
    encoder.encodeStruct(codec.Uint32, val.number);
    encoder.encodeStruct(codec.Uint32, val.isUltimated);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeArrayPointer(codec.Uint8, val.secret);
  };
  function Ultimatinator_GetHeap_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Ultimatinator_GetHeap_Params.prototype.initDefaults_ = function() {
  };
  Ultimatinator_GetHeap_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Ultimatinator_GetHeap_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Ultimatinator_GetHeap_Params.encodedSize = codec.kStructHeaderSize + 0;

  Ultimatinator_GetHeap_Params.decode = function(decoder) {
    var packed;
    var val = new Ultimatinator_GetHeap_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  Ultimatinator_GetHeap_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Ultimatinator_GetHeap_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function Ultimatinator_GetHeap_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Ultimatinator_GetHeap_ResponseParams.prototype.initDefaults_ = function() {
    this.addr = 0;
  };
  Ultimatinator_GetHeap_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Ultimatinator_GetHeap_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  Ultimatinator_GetHeap_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  Ultimatinator_GetHeap_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new Ultimatinator_GetHeap_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.addr =
        decoder.decodeStruct(codec.Uint64);
    return val;
  };

  Ultimatinator_GetHeap_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Ultimatinator_GetHeap_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint64, val.addr);
  };
  function Ultimatinator_GetText_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Ultimatinator_GetText_Params.prototype.initDefaults_ = function() {
  };
  Ultimatinator_GetText_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Ultimatinator_GetText_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Ultimatinator_GetText_Params.encodedSize = codec.kStructHeaderSize + 0;

  Ultimatinator_GetText_Params.decode = function(decoder) {
    var packed;
    var val = new Ultimatinator_GetText_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  Ultimatinator_GetText_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Ultimatinator_GetText_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function Ultimatinator_GetText_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Ultimatinator_GetText_ResponseParams.prototype.initDefaults_ = function() {
    this.addr = 0;
  };
  Ultimatinator_GetText_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Ultimatinator_GetText_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  Ultimatinator_GetText_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  Ultimatinator_GetText_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new Ultimatinator_GetText_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.addr =
        decoder.decodeStruct(codec.Uint64);
    return val;
  };

  Ultimatinator_GetText_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Ultimatinator_GetText_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint64, val.addr);
  };
  function Ultimatinator_FindSecret_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Ultimatinator_FindSecret_Params.prototype.initDefaults_ = function() {
    this.id = 0;
  };
  Ultimatinator_FindSecret_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Ultimatinator_FindSecret_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  Ultimatinator_FindSecret_Params.encodedSize = codec.kStructHeaderSize + 8;

  Ultimatinator_FindSecret_Params.decode = function(decoder) {
    var packed;
    var val = new Ultimatinator_FindSecret_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.id =
        decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  Ultimatinator_FindSecret_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Ultimatinator_FindSecret_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.id);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function Ultimatinator_FindSecret_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Ultimatinator_FindSecret_ResponseParams.prototype.initDefaults_ = function() {
    this.secret = null;
  };
  Ultimatinator_FindSecret_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Ultimatinator_FindSecret_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Ultimatinator_FindSecret_ResponseParams.secret
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Ultimatinator_FindSecret_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  Ultimatinator_FindSecret_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new Ultimatinator_FindSecret_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.secret =
        decoder.decodeStruct(codec.String);
    return val;
  };

  Ultimatinator_FindSecret_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Ultimatinator_FindSecret_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.secret);
  };
  function Ultimatinator_BecomeUltimate_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  Ultimatinator_BecomeUltimate_Params.prototype.initDefaults_ = function() {
    this.trainees = null;
  };
  Ultimatinator_BecomeUltimate_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  Ultimatinator_BecomeUltimate_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate Ultimatinator_BecomeUltimate_Params.trainees
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(Trainee), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  Ultimatinator_BecomeUltimate_Params.encodedSize = codec.kStructHeaderSize + 8;

  Ultimatinator_BecomeUltimate_Params.decode = function(decoder) {
    var packed;
    var val = new Ultimatinator_BecomeUltimate_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.trainees =
        decoder.decodeArrayPointer(new codec.PointerTo(Trainee));
    return val;
  };

  Ultimatinator_BecomeUltimate_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(Ultimatinator_BecomeUltimate_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(Trainee), val.trainees);
  };
  var kUltimatinator_GetHeap_Name = 0;
  var kUltimatinator_GetText_Name = 1;
  var kUltimatinator_FindSecret_Name = 2;
  var kUltimatinator_BecomeUltimate_Name = 3;

  function UltimatinatorPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(Ultimatinator,
                                                   handleOrPtrInfo);
  }

  function UltimatinatorAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        Ultimatinator, associatedInterfacePtrInfo);
  }

  UltimatinatorAssociatedPtr.prototype =
      Object.create(UltimatinatorPtr.prototype);
  UltimatinatorAssociatedPtr.prototype.constructor =
      UltimatinatorAssociatedPtr;

  function UltimatinatorProxy(receiver) {
    this.receiver_ = receiver;
  }
  UltimatinatorPtr.prototype.getHeap = function() {
    return UltimatinatorProxy.prototype.getHeap
        .apply(this.ptr.getProxy(), arguments);
  };

  UltimatinatorProxy.prototype.getHeap = function() {
    var params_ = new Ultimatinator_GetHeap_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kUltimatinator_GetHeap_Name,
          codec.align(Ultimatinator_GetHeap_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(Ultimatinator_GetHeap_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(Ultimatinator_GetHeap_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  UltimatinatorPtr.prototype.getText = function() {
    return UltimatinatorProxy.prototype.getText
        .apply(this.ptr.getProxy(), arguments);
  };

  UltimatinatorProxy.prototype.getText = function() {
    var params_ = new Ultimatinator_GetText_Params();
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kUltimatinator_GetText_Name,
          codec.align(Ultimatinator_GetText_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(Ultimatinator_GetText_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(Ultimatinator_GetText_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  UltimatinatorPtr.prototype.findSecret = function() {
    return UltimatinatorProxy.prototype.findSecret
        .apply(this.ptr.getProxy(), arguments);
  };

  UltimatinatorProxy.prototype.findSecret = function(id) {
    var params_ = new Ultimatinator_FindSecret_Params();
    params_.id = id;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kUltimatinator_FindSecret_Name,
          codec.align(Ultimatinator_FindSecret_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(Ultimatinator_FindSecret_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(Ultimatinator_FindSecret_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  UltimatinatorPtr.prototype.becomeUltimate = function() {
    return UltimatinatorProxy.prototype.becomeUltimate
        .apply(this.ptr.getProxy(), arguments);
  };

  UltimatinatorProxy.prototype.becomeUltimate = function(trainees) {
    var params_ = new Ultimatinator_BecomeUltimate_Params();
    params_.trainees = trainees;
    var builder = new codec.MessageV0Builder(
        kUltimatinator_BecomeUltimate_Name,
        codec.align(Ultimatinator_BecomeUltimate_Params.encodedSize));
    builder.encodeStruct(Ultimatinator_BecomeUltimate_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function UltimatinatorStub(delegate) {
    this.delegate_ = delegate;
  }
  UltimatinatorStub.prototype.getHeap = function() {
    return this.delegate_ && this.delegate_.getHeap && this.delegate_.getHeap();
  }
  UltimatinatorStub.prototype.getText = function() {
    return this.delegate_ && this.delegate_.getText && this.delegate_.getText();
  }
  UltimatinatorStub.prototype.findSecret = function(id) {
    return this.delegate_ && this.delegate_.findSecret && this.delegate_.findSecret(id);
  }
  UltimatinatorStub.prototype.becomeUltimate = function(trainees) {
    return this.delegate_ && this.delegate_.becomeUltimate && this.delegate_.becomeUltimate(trainees);
  }

  UltimatinatorStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kUltimatinator_BecomeUltimate_Name:
      var params = reader.decodeStruct(Ultimatinator_BecomeUltimate_Params);
      this.becomeUltimate(params.trainees);
      return true;
    default:
      return false;
    }
  };

  UltimatinatorStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kUltimatinator_GetHeap_Name:
      var params = reader.decodeStruct(Ultimatinator_GetHeap_Params);
      this.getHeap().then(function(response) {
        var responseParams =
            new Ultimatinator_GetHeap_ResponseParams();
        responseParams.addr = response.addr;
        var builder = new codec.MessageV1Builder(
            kUltimatinator_GetHeap_Name,
            codec.align(Ultimatinator_GetHeap_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(Ultimatinator_GetHeap_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kUltimatinator_GetText_Name:
      var params = reader.decodeStruct(Ultimatinator_GetText_Params);
      this.getText().then(function(response) {
        var responseParams =
            new Ultimatinator_GetText_ResponseParams();
        responseParams.addr = response.addr;
        var builder = new codec.MessageV1Builder(
            kUltimatinator_GetText_Name,
            codec.align(Ultimatinator_GetText_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(Ultimatinator_GetText_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kUltimatinator_FindSecret_Name:
      var params = reader.decodeStruct(Ultimatinator_FindSecret_Params);
      this.findSecret(params.id).then(function(response) {
        var responseParams =
            new Ultimatinator_FindSecret_ResponseParams();
        responseParams.secret = response.secret;
        var builder = new codec.MessageV1Builder(
            kUltimatinator_FindSecret_Name,
            codec.align(Ultimatinator_FindSecret_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(Ultimatinator_FindSecret_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateUltimatinatorRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kUltimatinator_GetHeap_Name:
        if (message.expectsResponse())
          paramsClass = Ultimatinator_GetHeap_Params;
      break;
      case kUltimatinator_GetText_Name:
        if (message.expectsResponse())
          paramsClass = Ultimatinator_GetText_Params;
      break;
      case kUltimatinator_FindSecret_Name:
        if (message.expectsResponse())
          paramsClass = Ultimatinator_FindSecret_Params;
      break;
      case kUltimatinator_BecomeUltimate_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = Ultimatinator_BecomeUltimate_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateUltimatinatorResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kUltimatinator_GetHeap_Name:
        if (message.isResponse())
          paramsClass = Ultimatinator_GetHeap_ResponseParams;
        break;
      case kUltimatinator_GetText_Name:
        if (message.isResponse())
          paramsClass = Ultimatinator_GetText_ResponseParams;
        break;
      case kUltimatinator_FindSecret_Name:
        if (message.isResponse())
          paramsClass = Ultimatinator_FindSecret_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var Ultimatinator = {
    name: 'blink.mojom.Ultimatinator',
    kVersion: 0,
    ptrClass: UltimatinatorPtr,
    proxyClass: UltimatinatorProxy,
    stubClass: UltimatinatorStub,
    validateRequest: validateUltimatinatorRequest,
    validateResponse: validateUltimatinatorResponse,
  };
  UltimatinatorStub.prototype.validator = validateUltimatinatorRequest;
  UltimatinatorProxy.prototype.validator = validateUltimatinatorResponse;
  exports.Trainee = Trainee;
  exports.Ultimatinator = Ultimatinator;
  exports.UltimatinatorPtr = UltimatinatorPtr;
  exports.UltimatinatorAssociatedPtr = UltimatinatorAssociatedPtr;
})();