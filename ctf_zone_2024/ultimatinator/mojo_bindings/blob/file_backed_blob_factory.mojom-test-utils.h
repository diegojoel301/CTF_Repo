// third_party/blink/public/mojom/blob/file_backed_blob_factory.mojom-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_BLOB_FILE_BACKED_BLOB_FACTORY_MOJOM_TEST_UTILS_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_BLOB_FILE_BACKED_BLOB_FACTORY_MOJOM_TEST_UTILS_H_

#include "third_party/blink/public/mojom/blob/file_backed_blob_factory.mojom.h"
#include "third_party/blink/public/common/common_export.h"


namespace blink::mojom {


class BLINK_COMMON_EXPORT FileBackedBlobFactoryInterceptorForTesting : public FileBackedBlobFactory {
  virtual FileBackedBlobFactory* GetForwardingInterface() = 0;
  void RegisterBlob(::mojo::PendingReceiver<::blink::mojom::Blob> blob, const std::string& uuid, const std::string& content_type, ::blink::mojom::DataElementFilePtr file) override;
  void RegisterBlobSync(::mojo::PendingReceiver<::blink::mojom::Blob> blob, const std::string& uuid, const std::string& content_type, ::blink::mojom::DataElementFilePtr file, RegisterBlobSyncCallback callback) override;
};
class BLINK_COMMON_EXPORT FileBackedBlobFactoryAsyncWaiter {
 public:
  explicit FileBackedBlobFactoryAsyncWaiter(FileBackedBlobFactory* proxy);

  FileBackedBlobFactoryAsyncWaiter(const FileBackedBlobFactoryAsyncWaiter&) = delete;
  FileBackedBlobFactoryAsyncWaiter& operator=(const FileBackedBlobFactoryAsyncWaiter&) = delete;

  ~FileBackedBlobFactoryAsyncWaiter();
  void RegisterBlobSync(
      ::mojo::PendingReceiver<::blink::mojom::Blob> blob, const std::string& uuid, const std::string& content_type, ::blink::mojom::DataElementFilePtr file);
  

 private:
  FileBackedBlobFactory* const proxy_;
};




}  // blink::mojom

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_BLOB_FILE_BACKED_BLOB_FACTORY_MOJOM_TEST_UTILS_H_