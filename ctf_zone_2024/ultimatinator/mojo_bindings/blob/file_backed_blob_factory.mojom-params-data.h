// third_party/blink/public/mojom/blob/file_backed_blob_factory.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_BLOB_FILE_BACKED_BLOB_FACTORY_MOJOM_PARAMS_DATA_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_BLOB_FILE_BACKED_BLOB_FACTORY_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

namespace mojo::internal {
class ValidationContext;
}


namespace blink::mojom {
namespace internal {
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FileBackedBlobFactory_RegisterBlob_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data blob;
  uint8_t pad0_[4];
  mojo::internal::Pointer<mojo::internal::String_Data> uuid;
  mojo::internal::Pointer<mojo::internal::String_Data> content_type;
  mojo::internal::Pointer<::blink::mojom::internal::DataElementFile_Data> file;

 private:
  friend class mojo::internal::MessageFragment<FileBackedBlobFactory_RegisterBlob_Params_Data>;

  FileBackedBlobFactory_RegisterBlob_Params_Data();
  ~FileBackedBlobFactory_RegisterBlob_Params_Data() = delete;
};
static_assert(sizeof(FileBackedBlobFactory_RegisterBlob_Params_Data) == 40,
              "Bad sizeof(FileBackedBlobFactory_RegisterBlob_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FileBackedBlobFactory_RegisterBlobSync_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data blob;
  uint8_t pad0_[4];
  mojo::internal::Pointer<mojo::internal::String_Data> uuid;
  mojo::internal::Pointer<mojo::internal::String_Data> content_type;
  mojo::internal::Pointer<::blink::mojom::internal::DataElementFile_Data> file;

 private:
  friend class mojo::internal::MessageFragment<FileBackedBlobFactory_RegisterBlobSync_Params_Data>;

  FileBackedBlobFactory_RegisterBlobSync_Params_Data();
  ~FileBackedBlobFactory_RegisterBlobSync_Params_Data() = delete;
};
static_assert(sizeof(FileBackedBlobFactory_RegisterBlobSync_Params_Data) == 40,
              "Bad sizeof(FileBackedBlobFactory_RegisterBlobSync_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FileBackedBlobFactory_RegisterBlobSync_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<FileBackedBlobFactory_RegisterBlobSync_ResponseParams_Data>;

  FileBackedBlobFactory_RegisterBlobSync_ResponseParams_Data();
  ~FileBackedBlobFactory_RegisterBlobSync_ResponseParams_Data() = delete;
};
static_assert(sizeof(FileBackedBlobFactory_RegisterBlobSync_ResponseParams_Data) == 8,
              "Bad sizeof(FileBackedBlobFactory_RegisterBlobSync_ResponseParams_Data)");

}  // namespace internal


class FileBackedBlobFactory_RegisterBlob_ParamsDataView {
 public:
  FileBackedBlobFactory_RegisterBlob_ParamsDataView() = default;

  FileBackedBlobFactory_RegisterBlob_ParamsDataView(
      internal::FileBackedBlobFactory_RegisterBlob_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeBlob() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::blink::mojom::BlobInterfaceBase>>(
            &data_->blob, &result, message_);
    DCHECK(ret);
    return result;
  }
  inline void GetUuidDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUuid(UserType* output) {
    
    auto* pointer = data_->uuid.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetContentTypeDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadContentType(UserType* output) {
    
    auto* pointer = data_->content_type.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetFileDataView(
      ::blink::mojom::DataElementFileDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFile(UserType* output) {
    
    auto* pointer = data_->file.Get();
    return mojo::internal::Deserialize<::blink::mojom::DataElementFileDataView>(
        pointer, output, message_);
  }
 private:
  internal::FileBackedBlobFactory_RegisterBlob_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


class FileBackedBlobFactory_RegisterBlobSync_ParamsDataView {
 public:
  FileBackedBlobFactory_RegisterBlobSync_ParamsDataView() = default;

  FileBackedBlobFactory_RegisterBlobSync_ParamsDataView(
      internal::FileBackedBlobFactory_RegisterBlobSync_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeBlob() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::blink::mojom::BlobInterfaceBase>>(
            &data_->blob, &result, message_);
    DCHECK(ret);
    return result;
  }
  inline void GetUuidDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUuid(UserType* output) {
    
    auto* pointer = data_->uuid.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetContentTypeDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadContentType(UserType* output) {
    
    auto* pointer = data_->content_type.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetFileDataView(
      ::blink::mojom::DataElementFileDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFile(UserType* output) {
    
    auto* pointer = data_->file.Get();
    return mojo::internal::Deserialize<::blink::mojom::DataElementFileDataView>(
        pointer, output, message_);
  }
 private:
  internal::FileBackedBlobFactory_RegisterBlobSync_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


class FileBackedBlobFactory_RegisterBlobSync_ResponseParamsDataView {
 public:
  FileBackedBlobFactory_RegisterBlobSync_ResponseParamsDataView() = default;

  FileBackedBlobFactory_RegisterBlobSync_ResponseParamsDataView(
      internal::FileBackedBlobFactory_RegisterBlobSync_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::FileBackedBlobFactory_RegisterBlobSync_ResponseParams_Data* data_ = nullptr;
};

inline void FileBackedBlobFactory_RegisterBlob_ParamsDataView::GetUuidDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->uuid.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void FileBackedBlobFactory_RegisterBlob_ParamsDataView::GetContentTypeDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->content_type.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void FileBackedBlobFactory_RegisterBlob_ParamsDataView::GetFileDataView(
    ::blink::mojom::DataElementFileDataView* output) {
  auto pointer = data_->file.Get();
  *output = ::blink::mojom::DataElementFileDataView(pointer, message_);
}


inline void FileBackedBlobFactory_RegisterBlobSync_ParamsDataView::GetUuidDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->uuid.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void FileBackedBlobFactory_RegisterBlobSync_ParamsDataView::GetContentTypeDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->content_type.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void FileBackedBlobFactory_RegisterBlobSync_ParamsDataView::GetFileDataView(
    ::blink::mojom::DataElementFileDataView* output) {
  auto pointer = data_->file.Get();
  *output = ::blink::mojom::DataElementFileDataView(pointer, message_);
}





}  // blink::mojom

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_BLOB_FILE_BACKED_BLOB_FACTORY_MOJOM_PARAMS_DATA_H_