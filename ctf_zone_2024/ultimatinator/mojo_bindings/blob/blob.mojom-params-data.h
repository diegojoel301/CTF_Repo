// third_party/blink/public/mojom/blob/blob.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_BLOB_BLOB_MOJOM_PARAMS_DATA_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_BLOB_BLOB_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

namespace mojo::internal {
class ValidationContext;
}


namespace blink::mojom {
namespace internal {
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) BlobReaderClient_OnCalculatedSize_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint64_t total_size;
  uint64_t expected_content_size;

 private:
  friend class mojo::internal::MessageFragment<BlobReaderClient_OnCalculatedSize_Params_Data>;

  BlobReaderClient_OnCalculatedSize_Params_Data();
  ~BlobReaderClient_OnCalculatedSize_Params_Data() = delete;
};
static_assert(sizeof(BlobReaderClient_OnCalculatedSize_Params_Data) == 24,
              "Bad sizeof(BlobReaderClient_OnCalculatedSize_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) BlobReaderClient_OnComplete_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t status;
  uint8_t pad0_[4];
  uint64_t data_length;

 private:
  friend class mojo::internal::MessageFragment<BlobReaderClient_OnComplete_Params_Data>;

  BlobReaderClient_OnComplete_Params_Data();
  ~BlobReaderClient_OnComplete_Params_Data() = delete;
};
static_assert(sizeof(BlobReaderClient_OnComplete_Params_Data) == 24,
              "Bad sizeof(BlobReaderClient_OnComplete_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) Blob_Clone_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data blob;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<Blob_Clone_Params_Data>;

  Blob_Clone_Params_Data();
  ~Blob_Clone_Params_Data() = delete;
};
static_assert(sizeof(Blob_Clone_Params_Data) == 16,
              "Bad sizeof(Blob_Clone_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) Blob_AsDataPipeGetter_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data data_pipe_getter;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<Blob_AsDataPipeGetter_Params_Data>;

  Blob_AsDataPipeGetter_Params_Data();
  ~Blob_AsDataPipeGetter_Params_Data() = delete;
};
static_assert(sizeof(Blob_AsDataPipeGetter_Params_Data) == 16,
              "Bad sizeof(Blob_AsDataPipeGetter_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) Blob_ReadAll_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data pipe;
  mojo::internal::Interface_Data client;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<Blob_ReadAll_Params_Data>;

  Blob_ReadAll_Params_Data();
  ~Blob_ReadAll_Params_Data() = delete;
};
static_assert(sizeof(Blob_ReadAll_Params_Data) == 24,
              "Bad sizeof(Blob_ReadAll_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) Blob_ReadRange_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint64_t offset;
  uint64_t length;
  mojo::internal::Handle_Data pipe;
  mojo::internal::Interface_Data client;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<Blob_ReadRange_Params_Data>;

  Blob_ReadRange_Params_Data();
  ~Blob_ReadRange_Params_Data() = delete;
};
static_assert(sizeof(Blob_ReadRange_Params_Data) == 40,
              "Bad sizeof(Blob_ReadRange_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) Blob_Load_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data loader;
  uint8_t pad0_[4];
  mojo::internal::Pointer<mojo::internal::String_Data> request_method;
  mojo::internal::Pointer<::network::mojom::internal::HttpRequestHeaders_Data> headers;
  mojo::internal::Interface_Data client;

 private:
  friend class mojo::internal::MessageFragment<Blob_Load_Params_Data>;

  Blob_Load_Params_Data();
  ~Blob_Load_Params_Data() = delete;
};
static_assert(sizeof(Blob_Load_Params_Data) == 40,
              "Bad sizeof(Blob_Load_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) Blob_ReadSideData_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<Blob_ReadSideData_Params_Data>;

  Blob_ReadSideData_Params_Data();
  ~Blob_ReadSideData_Params_Data() = delete;
};
static_assert(sizeof(Blob_ReadSideData_Params_Data) == 8,
              "Bad sizeof(Blob_ReadSideData_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) Blob_ReadSideData_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  ::mojo_base::mojom::internal::BigBuffer_Data data;

 private:
  friend class mojo::internal::MessageFragment<Blob_ReadSideData_ResponseParams_Data>;

  Blob_ReadSideData_ResponseParams_Data();
  ~Blob_ReadSideData_ResponseParams_Data() = delete;
};
static_assert(sizeof(Blob_ReadSideData_ResponseParams_Data) == 24,
              "Bad sizeof(Blob_ReadSideData_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) Blob_CaptureSnapshot_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<Blob_CaptureSnapshot_Params_Data>;

  Blob_CaptureSnapshot_Params_Data();
  ~Blob_CaptureSnapshot_Params_Data() = delete;
};
static_assert(sizeof(Blob_CaptureSnapshot_Params_Data) == 8,
              "Bad sizeof(Blob_CaptureSnapshot_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) Blob_CaptureSnapshot_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint64_t length;
  mojo::internal::Pointer<::mojo_base::mojom::internal::Time_Data> modification_time;

 private:
  friend class mojo::internal::MessageFragment<Blob_CaptureSnapshot_ResponseParams_Data>;

  Blob_CaptureSnapshot_ResponseParams_Data();
  ~Blob_CaptureSnapshot_ResponseParams_Data() = delete;
};
static_assert(sizeof(Blob_CaptureSnapshot_ResponseParams_Data) == 24,
              "Bad sizeof(Blob_CaptureSnapshot_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) Blob_GetInternalUUID_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<Blob_GetInternalUUID_Params_Data>;

  Blob_GetInternalUUID_Params_Data();
  ~Blob_GetInternalUUID_Params_Data() = delete;
};
static_assert(sizeof(Blob_GetInternalUUID_Params_Data) == 8,
              "Bad sizeof(Blob_GetInternalUUID_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) Blob_GetInternalUUID_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> uuid;

 private:
  friend class mojo::internal::MessageFragment<Blob_GetInternalUUID_ResponseParams_Data>;

  Blob_GetInternalUUID_ResponseParams_Data();
  ~Blob_GetInternalUUID_ResponseParams_Data() = delete;
};
static_assert(sizeof(Blob_GetInternalUUID_ResponseParams_Data) == 16,
              "Bad sizeof(Blob_GetInternalUUID_ResponseParams_Data)");

}  // namespace internal


class BlobReaderClient_OnCalculatedSize_ParamsDataView {
 public:
  BlobReaderClient_OnCalculatedSize_ParamsDataView() = default;

  BlobReaderClient_OnCalculatedSize_ParamsDataView(
      internal::BlobReaderClient_OnCalculatedSize_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  uint64_t total_size() const {
    return data_->total_size;
  }
  uint64_t expected_content_size() const {
    return data_->expected_content_size;
  }
 private:
  internal::BlobReaderClient_OnCalculatedSize_Params_Data* data_ = nullptr;
};


class BlobReaderClient_OnComplete_ParamsDataView {
 public:
  BlobReaderClient_OnComplete_ParamsDataView() = default;

  BlobReaderClient_OnComplete_ParamsDataView(
      internal::BlobReaderClient_OnComplete_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t status() const {
    return data_->status;
  }
  uint64_t data_length() const {
    return data_->data_length;
  }
 private:
  internal::BlobReaderClient_OnComplete_Params_Data* data_ = nullptr;
};


class Blob_Clone_ParamsDataView {
 public:
  Blob_Clone_ParamsDataView() = default;

  Blob_Clone_ParamsDataView(
      internal::Blob_Clone_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeBlob() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::blink::mojom::BlobInterfaceBase>>(
            &data_->blob, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::Blob_Clone_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


class Blob_AsDataPipeGetter_ParamsDataView {
 public:
  Blob_AsDataPipeGetter_ParamsDataView() = default;

  Blob_AsDataPipeGetter_ParamsDataView(
      internal::Blob_AsDataPipeGetter_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeDataPipeGetter() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::network::mojom::DataPipeGetterInterfaceBase>>(
            &data_->data_pipe_getter, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::Blob_AsDataPipeGetter_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


class Blob_ReadAll_ParamsDataView {
 public:
  Blob_ReadAll_ParamsDataView() = default;

  Blob_ReadAll_ParamsDataView(
      internal::Blob_ReadAll_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  mojo::ScopedDataPipeProducerHandle TakePipe() {
    mojo::ScopedDataPipeProducerHandle result;
    bool ret =
        mojo::internal::Deserialize<mojo::ScopedDataPipeProducerHandle>(
            &data_->pipe, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeClient() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::blink::mojom::BlobReaderClientInterfaceBase>>(
            &data_->client, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::Blob_ReadAll_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


class Blob_ReadRange_ParamsDataView {
 public:
  Blob_ReadRange_ParamsDataView() = default;

  Blob_ReadRange_ParamsDataView(
      internal::Blob_ReadRange_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  uint64_t offset() const {
    return data_->offset;
  }
  uint64_t length() const {
    return data_->length;
  }
  mojo::ScopedDataPipeProducerHandle TakePipe() {
    mojo::ScopedDataPipeProducerHandle result;
    bool ret =
        mojo::internal::Deserialize<mojo::ScopedDataPipeProducerHandle>(
            &data_->pipe, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeClient() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::blink::mojom::BlobReaderClientInterfaceBase>>(
            &data_->client, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::Blob_ReadRange_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


class Blob_Load_ParamsDataView {
 public:
  Blob_Load_ParamsDataView() = default;

  Blob_Load_ParamsDataView(
      internal::Blob_Load_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeLoader() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::network::mojom::URLLoaderInterfaceBase>>(
            &data_->loader, &result, message_);
    DCHECK(ret);
    return result;
  }
  inline void GetRequestMethodDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRequestMethod(UserType* output) {
    
    auto* pointer = data_->request_method.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetHeadersDataView(
      ::network::mojom::HttpRequestHeadersDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadHeaders(UserType* output) {
    
    auto* pointer = data_->headers.Get();
    return mojo::internal::Deserialize<::network::mojom::HttpRequestHeadersDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeClient() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::network::mojom::URLLoaderClientInterfaceBase>>(
            &data_->client, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::Blob_Load_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


class Blob_ReadSideData_ParamsDataView {
 public:
  Blob_ReadSideData_ParamsDataView() = default;

  Blob_ReadSideData_ParamsDataView(
      internal::Blob_ReadSideData_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::Blob_ReadSideData_Params_Data* data_ = nullptr;
};


class Blob_ReadSideData_ResponseParamsDataView {
 public:
  Blob_ReadSideData_ResponseParamsDataView() = default;

  Blob_ReadSideData_ResponseParamsDataView(
      internal::Blob_ReadSideData_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetDataDataView(
      ::mojo_base::mojom::BigBufferDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadData(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::mojo_base::mojom::BigBufferDataView, UserType>(),
    "Attempting to read the optional `data` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with std::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadData` instead "
    "of `ReadData if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = !data_->data.is_null() ? &data_->data : nullptr;
    return mojo::internal::Deserialize<::mojo_base::mojom::BigBufferDataView>(
        pointer, output, message_);
  }
 private:
  internal::Blob_ReadSideData_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


class Blob_CaptureSnapshot_ParamsDataView {
 public:
  Blob_CaptureSnapshot_ParamsDataView() = default;

  Blob_CaptureSnapshot_ParamsDataView(
      internal::Blob_CaptureSnapshot_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::Blob_CaptureSnapshot_Params_Data* data_ = nullptr;
};


class Blob_CaptureSnapshot_ResponseParamsDataView {
 public:
  Blob_CaptureSnapshot_ResponseParamsDataView() = default;

  Blob_CaptureSnapshot_ResponseParamsDataView(
      internal::Blob_CaptureSnapshot_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  uint64_t length() const {
    return data_->length;
  }
  inline void GetModificationTimeDataView(
      ::mojo_base::mojom::TimeDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadModificationTime(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::mojo_base::mojom::TimeDataView, UserType>(),
    "Attempting to read the optional `modification_time` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with std::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadModificationTime` instead "
    "of `ReadModificationTime if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->modification_time.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDataView>(
        pointer, output, message_);
  }
 private:
  internal::Blob_CaptureSnapshot_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


class Blob_GetInternalUUID_ParamsDataView {
 public:
  Blob_GetInternalUUID_ParamsDataView() = default;

  Blob_GetInternalUUID_ParamsDataView(
      internal::Blob_GetInternalUUID_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::Blob_GetInternalUUID_Params_Data* data_ = nullptr;
};


class Blob_GetInternalUUID_ResponseParamsDataView {
 public:
  Blob_GetInternalUUID_ResponseParamsDataView() = default;

  Blob_GetInternalUUID_ResponseParamsDataView(
      internal::Blob_GetInternalUUID_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetUuidDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUuid(UserType* output) {
    
    auto* pointer = data_->uuid.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::Blob_GetInternalUUID_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};













inline void Blob_Load_ParamsDataView::GetRequestMethodDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->request_method.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void Blob_Load_ParamsDataView::GetHeadersDataView(
    ::network::mojom::HttpRequestHeadersDataView* output) {
  auto pointer = data_->headers.Get();
  *output = ::network::mojom::HttpRequestHeadersDataView(pointer, message_);
}




inline void Blob_ReadSideData_ResponseParamsDataView::GetDataDataView(
    ::mojo_base::mojom::BigBufferDataView* output) {
  auto pointer = &data_->data;
  *output = ::mojo_base::mojom::BigBufferDataView(pointer, message_);
}




inline void Blob_CaptureSnapshot_ResponseParamsDataView::GetModificationTimeDataView(
    ::mojo_base::mojom::TimeDataView* output) {
  auto pointer = data_->modification_time.Get();
  *output = ::mojo_base::mojom::TimeDataView(pointer, message_);
}




inline void Blob_GetInternalUUID_ResponseParamsDataView::GetUuidDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->uuid.Get();
  *output = mojo::StringDataView(pointer, message_);
}



}  // blink::mojom

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_BLOB_BLOB_MOJOM_PARAMS_DATA_H_